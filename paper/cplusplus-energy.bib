@book{alfred2007compilers,
  title = {Compilers principles, techniques \& tools},
  author = {Alfred, V Aho and Monica, S Lam and Jeffrey, D Ullman},
  year = {2007},
  publisher = {pearson Education},
}

@inproceedings{liang2017vectorization,
  title = {Vectorization and parallelization of loops in {C/C++} code},
  author = {Liang, Xuejun and Humos, Ali A and Pei, Tzusheng},
  booktitle = {Proceedings of the International Conference on Frontiers in
               Education: Computer Science and Computer Engineering (FECS)},
  pages = {203--206},
  year = {2017},
  organization = {The Steering Committee of The World Congress in Computer
                  Science, Computer~…},
}

@inproceedings{khudia2014harnessing,
  title = {Harnessing soft computations for low-budget fault tolerance},
  author = {Khudia, Daya Shanker and Mahlke, Scott},
  booktitle = {2014 47th Annual IEEE/ACM International Symposium on
               Microarchitecture},
  pages = {319--330},
  year = {2014},
  organization = {IEEE},
}

@article{flegar2019floatx,
  author = {Flegar, Goran and Scheidegger, Florian and Novakovi{\'c}, Vedran and
            Mariani, Giovani and Tom{\'{}} s, Andr{\'e}s E and Malossi, A
            Cristiano I and Quintana-Ort{\'\i}, Enrique S},
  title = {{FloatX}: A {C++} Library for Customized Floating-Point Arithmetic},
  year = {2019},
  issue_date = {December 2019},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {45},
  number = {4},
  issn = {0098-3500},
  url = {https://doi.org/10.1145/3368086},
  doi = {10.1145/3368086},
  journal = {ACM Transactions on Mathematical Software (TOMS)},
  month = dec,
  articleno = {Article 40},
  numpages = {23},
}

@article{sampson2011enerj,
  title = {EnerJ: Approximate data types for safe and general low-power
           computation},
  author = {Sampson, Adrian and Dietl, Werner and Fortuna, Emily and
            Gnanapragasam, Danushen and Ceze, Luis and Grossman, Dan},
  journal = {ACM SIGPLAN Notices},
  volume = {46},
  number = {6},
  pages = {164--174},
  year = {2011},
  publisher = {ACM New York, NY, USA},
}

@inproceedings{kukati2013design,
  title = {Design and implementation of low power floating point arithmetic unit
           },
  author = {Kukati, Shilpa and Sujana, DV and Udaykumar, Shruthi and
            Jayakrishnan, P and Dhanabal, R},
  booktitle = {2013 International Conference on Green Computing, Communication
               and Conservation of Energy (ICGCE)},
  pages = {205--208},
  year = {2013},
  organization = {IEEE},
}

@misc{tagliavini2017transprecision,
  title = {A Transprecision Floating-Point Platform for Ultra-Low Power
           Computing},
  author = {Giuseppe Tagliavini and Stefan Mach and Davide Rossi and Andrea
            Marongiu and Luca Benini},
  year = {2017},
  eprint = {1711.10374},
  archivePrefix = {arXiv},
  primaryClass = {cs.AR},
  url = {https://arxiv.org/abs/1711.10374},
}

@inproceedings{7377807,
  author = {Branco, David and Henriques, Pedro Rangel},
  booktitle = {2015 IEEE 13th International Scientific Conference on Informatics
               },
  title = {Impact of GCC optimization levels in energy consumption during C/C++
           program execution},
  year = {2015},
  volume = {},
  number = {},
  pages = {52-56},
  keywords = {Optimization;Energy consumption;Context;Program
              processors;Software measurement;Hardware},
  doi = {10.1109/Informatics.2015.7377807},
}

@inproceedings{porkolab2022save,
  title = {Save the Earth, Program in C++!},
  author = {Porkol{\'a}b, Zolt{\'a}n},
  booktitle = {2022 IEEE 16th International Scientific Conference on Informatics
               (Informatics)},
  pages = {11--12},
  year = {2022},
  organization = {IEEE},
}

@inproceedings{10.1145/3139367.3139418,
  author = {Georgiou, Stefanos and Kechagia, Maria and Spinellis, Diomidis},
  title = {Analyzing Programming Languages' Energy Consumption: An Empirical
           Study},
  year = {2017},
  isbn = {9781450353557},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/3139367.3139418},
  doi = {10.1145/3139367.3139418},
  abstract = {Motivation: The energy efficiency of it-related products, from the
              software perspective, has gained vast popularity the recent years
              and paved a new emerging research field. However, there is limited
              number of research works regarding the energy consumption of
              relatively small programming tasks. This knowledge is critical to
              be known especially in cases where millions of small tasks are
              running in parallel on multiple devices all around the globe.Goal:
              In this preliminary study, we aim to identify energy implications
              of small, independent tasks developed in different programming
              languages; compiled, semi-compiled, and interpreted ones.Method: To
              achieve our purpose, we collected, refined, compared, and analyzed
              a number of implemented tasks from Rosetta Code, that is a publicly
              available Repository for programming chrestomathy.Results: Our
              analysis shows that among compiled programming languages such as C,
              C++, Java, and Go offer the highest energy efficiency for all of
              our tested tasks compared to C#, VB.Net, and Rust. Regarding
              interpreted programming languages PHP, Ruby, and JavaScript exhibit
              the most energy savings compared to Swift, R, Perl, and Python.},
  booktitle = {Proceedings of the 21st Pan-Hellenic Conference on Informatics},
  articleno = {42},
  numpages = {6},
  keywords = {Programming Languages, Energy Optimization, Energy Efficiency},
  location = {Larissa, Greece},
  series = {PCI '17},
}

@inproceedings{gernigon2023low,
  title = {Low-Precision Floating-Point for Efficient On-Board Deep Neural
           Network Processing},
  author = {Gernigon, C{\'e}dric and Filip, Silviu-Ioan and Sentieys, Olivier
            and Coggiola, Cl{\'e}ment and Bruno, Micka{\"e}l},
  booktitle = {2023 European Data Handling \& Data Processing Conference (EDHPC)
               },
  pages = {1--8},
  year = {2023},
  organization = {IEEE},
}

@article{cambier2020shifted,
  title = {Shifted and squeezed 8-bit floating point format for low-precision
           training of deep neural networks},
  author = {Cambier, L{\'e}opold and Bhiwandiwalla, Anahita and Gong, Ting and
            Nekuii, Mehran and Elibol, Oguz H and Tang, Hanlin},
  journal = {arXiv preprint arXiv:2001.05674},
  year = {2020},
}

@article{mersennetwister,
  author = {Matsumoto, Makoto and Nishimura, Takuji},
  title = {Mersenne twister: a 623-dimensionally equidistributed uniform
           pseudo-random number generator},
  year = {1998},
  issue_date = {Jan. 1998},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {8},
  number = {1},
  issn = {1049-3301},
  url = {https://doi.org/10.1145/272991.272995},
  doi = {10.1145/272991.272995},
  abstract = {A new algorithm called Mersenne Twister (MT) is proposed for
              generating uniform pseudorandom numbers. For a particular choice of
              parameters, the algorithm provides a super astronomical period of
              219937-1 and 623-dimensional equidistribution up to 32-bit accuracy
              , while using a working area of only 624 words. This is a new
              variant of the previously proposed generators, TGFSR, modified so
              as to admit a Mersenne-prime period. The characteristic polynomial
              has many terms. The distribution up to v bits accuracy for 1 ≤ v ≤
              32 is also shown to be good. An algorithm is also given that checks
              the primitivity of the characteristic polynomial of MT with
              computational complexity O(p2) where p is the degree of the
              polynomial.We implemented this generator in portable C-code. It
              passed several stringent statistical tests, including diehard. Its
              speed is comparable to other modern generators. Its merits are due
              to the efficient algorithms that are unique to polynomial
              calculations over the two-element field.},
  journal = {ACM Trans. Model. Comput. Simul.},
  month = jan,
  pages = {3-30},
  numpages = {28},
  keywords = {tempering, random number generation, primitive polynomials,
              multiple-recursive matrix method, inversive-decimation method,
              incomplete array, finite fields, TGFSR, Mersenne twister, Mersenne
              primes, MT19937, GFSR, m-sequences, k-distribution},
}

@article{latkin2014twofolds,
  title={Twofolds in {C} and {C++}},
  author={Latkin, Evgeny},
  journal={arXiv preprint arXiv:1412.5316},
  year={2014}
}
