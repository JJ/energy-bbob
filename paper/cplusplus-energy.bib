@book{alfred2007compilers,
  title={Compilers principles, techniques \& tools},
  author={Alfred, V Aho and Monica, S Lam and Jeffrey, D Ullman},
  year={2007},
  publisher={pearson Education}
}

@INPROCEEDINGS{7377807,
  author={Branco, David and Henriques, Pedro Rangel},
  booktitle={2015 IEEE 13th International Scientific Conference on Informatics},
  title={Impact of GCC optimization levels in energy consumption during C/C++ program execution},
  year={2015},
  volume={},
  number={},
  pages={52-56},
  keywords={Optimization;Energy consumption;Context;Program processors;Software measurement;Hardware},
  doi={10.1109/Informatics.2015.7377807}}

@inproceedings{porkolab2022save,
  title={Save the Earth, Program in C++!},
  author={Porkol{\'a}b, Zolt{\'a}n},
  booktitle={2022 IEEE 16th International Scientific Conference on Informatics (Informatics)},
  pages={11--12},
  year={2022},
  organization={IEEE}
}

@inproceedings{10.1145/3139367.3139418,
author = {Georgiou, Stefanos and Kechagia, Maria and Spinellis, Diomidis},
title = {Analyzing Programming Languages' Energy Consumption: An Empirical Study},
year = {2017},
isbn = {9781450353557},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3139367.3139418},
doi = {10.1145/3139367.3139418},
abstract = {Motivation: The energy efficiency of it-related products, from the software perspective, has gained vast popularity the recent years and paved a new emerging research field. However, there is limited number of research works regarding the energy consumption of relatively small programming tasks. This knowledge is critical to be known especially in cases where millions of small tasks are running in parallel on multiple devices all around the globe.Goal: In this preliminary study, we aim to identify energy implications of small, independent tasks developed in different programming languages; compiled, semi-compiled, and interpreted ones.Method: To achieve our purpose, we collected, refined, compared, and analyzed a number of implemented tasks from Rosetta Code, that is a publicly available Repository for programming chrestomathy.Results: Our analysis shows that among compiled programming languages such as C, C++, Java, and Go offer the highest energy efficiency for all of our tested tasks compared to C#, VB.Net, and Rust. Regarding interpreted programming languages PHP, Ruby, and JavaScript exhibit the most energy savings compared to Swift, R, Perl, and Python.},
booktitle = {Proceedings of the 21st Pan-Hellenic Conference on Informatics},
articleno = {42},
numpages = {6},
keywords = {Programming Languages, Energy Optimization, Energy Efficiency},
location = {Larissa, Greece},
series = {PCI '17}
}

@article{mersennetwister,
author = {Matsumoto, Makoto and Nishimura, Takuji},
title = {Mersenne twister: a 623-dimensionally equidistributed uniform pseudo-random number generator},
year = {1998},
issue_date = {Jan. 1998},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {8},
number = {1},
issn = {1049-3301},
url = {https://doi.org/10.1145/272991.272995},
doi = {10.1145/272991.272995},
abstract = {A new algorithm called Mersenne Twister (MT) is proposed for generating uniform pseudorandom numbers. For a particular choice of parameters, the algorithm provides a super astronomical period of 219937-1 and 623-dimensional equidistribution up to 32-bit accuracy, while using a working area of only 624 words. This is a new variant of the previously proposed generators, TGFSR, modified so as to admit a Mersenne-prime period. The characteristic polynomial has many terms. The distribution up to v bits accuracy for 1 ≤ v ≤ 32 is also shown to be good. An algorithm is also given that checks the primitivity of the characteristic polynomial of MT with computational complexity O(p2) where  p is the degree of the polynomial.We implemented this generator in portable C-code. It passed several stringent statistical tests, including diehard. Its speed is comparable to other modern generators. Its merits are due to the efficient algorithms that are unique to polynomial calculations over the two-element field.},
journal = {ACM Trans. Model. Comput. Simul.},
month = jan,
pages = {3-30},
numpages = {28},
keywords = {tempering, random number generation, primitive polynomials, multiple-recursive matrix method, inversive-decimation method, incomplete array, finite fields, TGFSR, Mersenne twister, Mersenne primes, MT19937, GFSR, m-sequences, k-distribution}
}